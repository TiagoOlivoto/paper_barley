check.overlap <- FALSE
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
n.dodge <- 1
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
vcomp
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
as_factor(name) |>
mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
as_factor(name) |>
metan::mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
list <- lapply(x, function(x){
x[["random"]] %>% select(Group, Variance)
})
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
as_factor(name) |>
metan::mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
as_factor(name)
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
metan::as_factor(name) |>
mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
x <- mod
list <- lapply(x, function(x){
x[["random"]] %>% select(Group, Variance)
})
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value))
x <- mod
list <- lapply(x, function(x){
x[["random"]] %>% select(Group, Variance)
})
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
metan::as_factor(name)
x <- mod
list <- lapply(x, function(x){
x[["random"]] %>% select(Group, Variance)
})
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value))
vcomp
vcomp <-
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
metan::as_factor(name) |>
mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value))
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group))
x <- mod
list <- lapply(x, function(x){
x[["random"]] %>% select(Group, Variance)
})
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value))
suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value))
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
metan::as_factor(name)
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name)
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name) |>
mutate(name = fct_recode(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name)
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name) |>
mutate(name = fct_relevel(name, "NDF", "CAN", "CH", "GFD", "PH", "GY"))
vcomp
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
strsplit("NDF, CAN, CH, GFD, PH, GY")
strsplit("NDF, CAN, CH, GFD, PH, GY", split = ",")
strsplit("NDF, CAN, CH  GFD, PH, GY", split = ",")
desc_stat
strsplit("NDF, CAN, CH, GFD, PH, GY", split = "\\s*(\\s|,)\\s*")
strsplit("NDF, CAN, CH, GFD  PH, GY", split = "\\s*(\\s|,)\\s*")
strsplit("NDF, CAN, CH, GFD, PH, GY", split = "\\s*(\\s|,)\\s*")[[1]]
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name)
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
levels <- strsplit("NDF, CAN, CH, GFD, PH, GY", split = "\\s*(\\s|,)\\s*")[[1]]
vcomp <-
mutate(vcomp,
name = factor(name, levels = levels))
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
vcomp <- suppressWarnings(
lapply(seq_along(list),
function(i){
set_names(list[[i]], "Group", names(list)[i])
}) %>%
reduce(full_join, by = "Group") %>%
pivot_longer(-Group)) |>
group_by(name) %>%
mutate(pct = value / sum(value)) |>
ungroup() |>
metan::as_factor(name)
# p1 <-
ggplot(vcomp, aes(x = name, y = value, fill = Group)) +
geom_bar(stat = "identity",
position = "fill",
color = "black",
size = 0.3,
width = 1) +
geom_text(aes(label = paste0(round(pct * 100, 2), "%")),
position = position_fill(vjust = .5),
size = 3.5) +
scale_y_continuous(expand = expansion(c(0, ifelse(position == "fill", 0, 0.05))),
labels = function(x) paste0(x*100, "%")) +
theme_bw() +
theme(legend.position = "bottom",
axis.ticks = element_line(size = size.line),
axis.ticks.length = unit(0.2, "cm"),
panel.grid = element_blank(),
legend.title = element_blank(),
strip.background = element_rect(fill = NA),
text = element_text(size = size.text, colour = "black"),
axis.text = element_text(size = size.text, colour = "black")) +
scale_x_discrete(guide = guide_axis(n.dodge = n.dodge, check.overlap = check.overlap))+
labs(x = "Traits",
y = ifelse(position == "fill", "Proportion of phenotypic variance", "Phenotypic variance"))
library(EnvRtype)
library(rio)
library(ggh4x)
library(ggridges)
library(corrr)
library(tidyverse)
library(metan)
my_theme <-
theme_bw() +
theme(panel.spacing = unit(0, "cm"),
panel.grid = element_blank(),
legend.position = "bottom")
df_traits <-
import("https://bit.ly/df_barley") |>
as_factor(1:6)
mod <-
gamem_met(df_traits,
env = ENV,
gen = GENOTYPES,
rep = REP,
block = IBLOCK,
resp = CAN:GY)
plot(mod, type = "vcomp")
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY")
ggsave("figs/fig4_vcomp.png", width = 8, height = 7)
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY") +
scale_y_continuous(expand = expansion(c(0, 0.1)))
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY",
percent = FALSE)
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY")
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY")
ggsave("figs/fig4_vcomp.png", width = 5, height = 7)
ggsave("figs/fig4_vcomp.png", width = 5, height = 5)
ggsave("figs/fig4_vcomp.png", width = 4, height = 5)
ggsave("figs/fig4_vcomp.png", width = 5, height = 5)
ggsave("figs/fig4_vcomp.png", width = 4.5, height = 5)
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY") +
scale_x_discrete(expand = expansion(0))
ggsave("figs/fig4_vcomp.png", width = 4.5, height = 5)
expansion(0)
expansion(1)
expansion()
expansion(add = 1)
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY")
plot(mod,
type = "vcomp",
trait.levels = "NDF, CAN, CH, GFD, PH, GY") +
scale_x_discrete(expand = expansion(0))
install.packages("SKM")
library(EnvRtype)
library(rio)
library(ggh4x)
library(ggridges)
library(corrr)
library(tidyverse)
library(metan)
my_theme <-
theme_bw() +
theme(panel.spacing = unit(0, "cm"),
panel.grid = element_blank(),
legend.position = "bottom")
df_traits <-
import("https://bit.ly/df_barley") |>
as_factor(1:6)
View(df_traits)
env_data <- import("https://bit.ly/env_data_nasapower")
str(env_data)
id_var <- names(env_data)[10:19]
# long format for climate data
env_data_d <-
env_data |>
remove_cols(LON:YYYYMMDD, daysFromStart) |>
pivot_longer(-env)
# long format for grain yield
df_gy_dist <-
df_traits |>
select(YEARS, GY) |>
mutate(name = "GY", .after = YEARS) |>
rename(value = GY,
env = YEARS)
# bind climate and GY
env_data_d <- rbind(df_gy_dist, env_data_d)
# mean values for each trait
env_data_mean <- means_by(env_data_d, name)
ggplot(env_data_d, aes(x = value, y = env, fill = env)) +
geom_density_ridges(scale = 0.9) +
geom_vline(data = env_data_mean,
aes(xintercept = value),
linetype = 2) +
facet_grid(~name, scales = "free") +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank()) +
scale_y_discrete(expand = expansion(c(0, 0.05))) +
labs(x = "Observed value",
y = "Density",
fill = "") +
my_theme
ggsave("figs/fig2_density_climate.png", width = 12, height = 5)
gamem_met
library(lme4)
library(lmerTest)
A2019 <- filter(df_traits, YEARS == "2019")
View(A2019)
mod <- lmer((1 | GENOTYPES) + STRESS / REP + (1|IBLOCK:(REP:STRESS))  + (1 | GENOTYPES:STRESS),
data = A2019)
A2019
mod <- lmer((1 | GENOTYPES) + STRESS / REP + (1|IBLOCK:(REP:STRESS))  + (1 | GENOTYPES:STRESS),
data = A2019)
mod <- lmer((1 | GENOTYPES) + STRESS / REP + (1|IBLOCK:(REP:STRESS))  + (1 | GENOTYPES:STRESS),
data = data.frame(A2019))
gamem_met
mod <- lmer(GY ~ (1 | GENOTYPES) + STRESS / REP + (1|IBLOCK:(REP:STRESS))  + (1 | GENOTYPES:STRESS),
data = data.frame(A2019))
vcov(mod)
summary(mod)
View(A2019)
